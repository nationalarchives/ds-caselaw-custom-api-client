#!/usr/bin/python3

import re
from os import listdir
from os.path import join

DICTS_FILE_PREAMBLE = """# This file is built automatically with script/build_xquery_type_dicts.
# DO NOT CHANGE IT MANUALLY!

\"\"\"
These classes are automatically generated using the `script/build_xquery_type_dicts` script, as part of pre-commit
checks. They are used to enforce appropriately typed variables being passed in to MarkLogic XQuery functions.
\"\"\"

from typing import Any, NewType, Optional, TypedDict
from caselawclient.models.documents import DocumentURIString

MarkLogicDocumentURIString = NewType("MarkLogicDocumentURIString", str)
MarkLogicDocumentVersionURIString = NewType("MarkLogicDocumentVersionURIString", MarkLogicDocumentURIString)

MarkLogicPrivilegeURIString = NewType("MarkLogicPrivilegeURIString", str)

class MarkLogicAPIDict(TypedDict):
    pass"""

XQY_FILES_PATCH = join("src", "caselawclient", "xquery")
DICTS_FILES_PATCH = join("src", "caselawclient", "xquery_type_dicts.py")

ML_TYPES_TO_PYTHON_TYPES_DICT = {
    "xs:string": "str",
    "json:array": "list[Any]",
    "xs:boolean": "bool",
    "xs:int": "int",
}

XQY_VARIABLE_DECLARATION_REGEX = re.compile(
    r"\s*declare variable \$(.+) as (.+) external;".replace(" ", "\\s+"),
    re.IGNORECASE | re.MULTILINE,
)


def file_name_to_class_name(file_name: str):
    return file_name.split(".")[0].title().replace("_", "") + "Dict"


def ml_type_to_python_type_declaration(variable_name: str, variable_type: str):
    if variable_type[-1] == "?":
        variable_optional = True
        variable_type = variable_type[:-1]
    else:
        variable_optional = False

    if variable_name == "version_uri":
        variable_type = "MarkLogicDocumentVersionURIString"
    elif variable_name == "privilege_uri":
        variable_type = "MarkLogicPrivilegeURIString"
    elif variable_name == "parent_uri":
        variable_type = "DocumentURIString"
    elif variable_name == "uri" or variable_name.endswith("_uri"):
        variable_type = "MarkLogicDocumentURIString"
    else:
        variable_type = ML_TYPES_TO_PYTHON_TYPES_DICT[variable_type]

    if variable_optional:
        variable_type = f"Optional[{variable_type}]"

    return f"{variable_name}: {variable_type}"


xquery_files = [f for f in listdir(XQY_FILES_PATCH) if f.endswith(".xqy")]

with open(DICTS_FILES_PATCH, "w") as dicts_file:
    dicts_file.write(DICTS_FILE_PREAMBLE)

    for xquery_file in sorted(xquery_files):
        with open(join(XQY_FILES_PATCH, xquery_file)) as file:
            data = file.read()

            matches = XQY_VARIABLE_DECLARATION_REGEX.findall(data)

            if len(matches) > 0:
                class_name = file_name_to_class_name(xquery_file)
                dicts_file.write(
                    f"""


# {xquery_file}
class {class_name}(MarkLogicAPIDict):""",
                )

                for match in sorted(matches):
                    type_declaration = ml_type_to_python_type_declaration(
                        variable_name=match[0],
                        variable_type=match[1],
                    )
                    dicts_file.write(f"\n    {type_declaration}")

    dicts_file.write("\n")
